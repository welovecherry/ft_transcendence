name: transcendence

services:
  frontend:
    container_name: frontend
    build: ./frontend
    image: frontend
    restart: always
    tty: true
    ports:
      - '443:443'
      # - '80:80'
    networks:
      - net
    environment:
      - CERT=${CERT}
      - CERT_KEY=${CERT_KEY}
      - DOMAIN_NAME=${DOMAIN_NAME}
    volumes:
      - ./frontend/srcs:/var/www/html
    depends_on:
      backend:
        condition: service_healthy

  backend:
    container_name: backend
    build: ./backend
    image: backend
    restart: always
    tty: true
    expose:
      - 8000
    depends_on:
      database:
        condition: service_healthy
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - SECRET_KEY=${SECRET_KEY}
      - CLIENT_ID=${CLIENT_ID}
      - CLIENT_SECRET=${CLIENT_SECRET}
      - REDIRECT_URI=${REDIRECT_URI}
      - AUTHORIZATION_URL=${AUTHORIZATION_URL}
      - TOKEN_URL=${TOKEN_URL}
      - USER_INFO_URL=${USER_INFO_URL}
    volumes:
      - ./backend:/usr/src/app
    networks:
      - net
    healthcheck:
      test: [ 'CMD', 'curl', '-f', 'http://localhost:8000/health/' ]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 5s

  database:
    container_name: database
    image: postgres:latest
    restart: always
    tty: true
    expose:
      - 5432
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - net
    healthcheck:
      test: [ 'CMD-SHELL', 'pg_isready -U myuser -d mydatabase' ]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 5s

volumes:
  postgres_data:
networks:
  net:
